load(
    "@bazel_gazelle//:def.bzl",
    "DEFAULT_LANGUAGES",
    "gazelle",
    "gazelle_binary",
)
load(
    "@rules_haskell//haskell:defs.bzl",
    "ghc_plugin",
    "haskell_binary",
    "haskell_library",
    "haskell_test",
)

exports_files(["nixpkgs.nix"])

# gazelle:exclude {benchmarks,examples,jvm-streaming,jvm-batching}
# gazelle:resolve gazelle_cabal jvm @openjdk//:lib

cc_library(
    name = "bctable",
    srcs = ["cbits/bctable.c"],
    hdrs = ["cbits/bctable.h"],
    strip_include_prefix = "cbits",
)

ghc_plugin(
    name = "inline-java-plugin",
    args = ["$(JAVABASE)/bin/javac"],
    module = "Language.Java.Inline.Plugin",
    toolchains = ["@bazel_tools//tools/jdk:current_java_runtime"],
    tools = ["@bazel_tools//tools/jdk:current_java_runtime"],
    visibility = ["//visibility:public"],
    deps = [":inline-java"],
)

gazelle(
    name = "gazelle",
    gazelle = ":gazelle_binary",
)

gazelle_binary(
    name = "gazelle_binary",
    languages = DEFAULT_LANGUAGES + ["@io_tweag_gazelle_cabal//gazelle_cabal"],
)

# rule generated from inline-java.cabal by gazelle_cabal
haskell_library(
    name = "inline-java",
    # cbits/bctable.h is included here so it can be found by Plugin.hs
    # at the same location when building with bazel as with stack.
    srcs = [
        "cbits/bctable.h",  # keep
        "src/Language/Java/Inline/Internal/Magic.hsc",
    ],
    ghcopts = ["-DVERSION_inline_java=\"0.10.0\""],
    version = "0.10.0",
    visibility = ["//visibility:public"],
    deps = [
        ":bctable",  # keep
        "@stackage//:base",
        "@stackage//:bytestring",
        "@stackage//:template-haskell",
    ],
)
